<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        rkJggg==
</value>
  </data>
</root>